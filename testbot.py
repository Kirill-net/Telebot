import random
import configparser
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from sqlalchemy.orm import sessionmaker
from modelsBot import engine, create_tables, insert_tables, data_random, insert_user,\
    add_word, delete_word, known_users

config = configparser.ConfigParser()                # –±–ª–æ–∫ —á—Ç–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ ini —Ñ–∞–π–ª–∞
config.read('sitings.ini')
token_bot = config['data_key']['token']

print('Start telegram bot...')

state_storage = StateMemoryStorage()
bot = TeleBot(token_bot, state_storage=state_storage)

Session = sessionmaker(bind=engine)    # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
session = Session()

create_tables(engine)
insert_tables()

known_users = known_users()  # –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —é–∑–µ—Ä—ã
buttons = []          # –∫–Ω–æ–ø–∫–∏
def show_hint(*lines):
    """ –§—É–Ω–∫—É–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–ª–µ–µ—Ç)

    :param lines: —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–ª–µ–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    """
    return '\n'.join(lines)
def show_target(data):
    """ –§—É–Ω–∫—É–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞

    :param data: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    :return:  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç f —Å—Ç—Ä–æ–∫—É
    """
    return f"{data['target_word']} -> {data['translate_word']}"
class Command:
    """ –ö–ª–∞—Å—Å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã–∑–æ–≤–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

    """
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
class MyStates(StatesGroup):
    """ –ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (State-StatesGroup)

    """
    target_word = State()
    translate_word = State()
    another_words = State()
@bot.message_handler(commands=['cards', 'start'])  # –º–µ—Ç–æ–¥ –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–∞–Ω–¥
def create_cards(message):
    """ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –∑–∞–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
         –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–¥–∞—á—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ '—Å–æ—Å—Ç–æ—è–Ω–∏–µ'

    :param message: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç message –æ—Ç telebot
    :return: None
    """
    cid = message.chat.id
    if cid not in known_users:                 # –ø—Ä–æ–≤–µ—Ä–∫–∞ chat.id –≤ —é–∑–µ—Ä–∞—Ö
        known_users.append(cid)
        insert_user(cid)                      # –∑–∞–ø—Ä–æ—Å –≤ –ë–î
        bot.send_message(cid, f"–ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –∏–∑—É—á–µ–Ω–∏—é –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ...")
    markup = types.ReplyKeyboardMarkup(row_width=2)     # —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏

    global buttons                      # –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–æ–∫
    buttons = []
    random_words = data_random(cid)     # –∑–∞–ø—Ä–æ—Å –≤ –ë–î
    target_word = random_words[0]
    translate = random_words[1]
    target_word_btn = types.KeyboardButton(target_word)       # –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞
    buttons.append(target_word_btn)                           # –¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É
    others = random_words[2]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)                          # –¥–æ–±–∞–≤–∏–ª–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–µ—Ç—ã—Ä–µ
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])     # –¥–æ–±–∞–≤–∏–ª–∏ –µ—â–µ —Ç—Ä–∏

    markup.add(*buttons)                                       # –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∞–∑–º–µ—Ç–∫—É

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)        # –≤—ã–≤–µ–ª–∏ —Ä–∞–∑–º–µ—Ç–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)  # –ø–µ—Ä–µ–¥–∞–µ–º
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:  # –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others

@bot.message_handler(func=lambda message: message.text == Command.NEXT)   # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–∞–Ω–¥—ã
def next_cards(message):
    """ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º message

    :param message: message telebot
    :return: None
    """
    create_cards(message)

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)   # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–∞–Ω–¥—ã
def delete_words(message):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ telebot –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é  'del_word'

    :param message: message telebot (chat.id)
    :return: None
    """
    chat_id = message.chat.id
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    bot.register_next_step_handler(message, del_word)
def del_word(message):
    """ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –ë–î –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤

    :param message: message telebot  (chat.id, text)
    :return:
    """
    word = message.text
    cid = message.chat.id
    message_to_user = delete_word(cid, word)
    bottons3(message, message_to_user)

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–∞–Ω–¥—ã
def write_word(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ telebot –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é  'save_word'

    :param message: message telebot (chat.id)
    :return: None
    """
    chat_id = message.chat.id
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    bot.register_next_step_handler(message, save_word)
def save_word(message):
    """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –ë–î –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ (f —Å—Ç—Ä–æ–∫—É, –∫–Ω–æ–ø–∫–∏)
            –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ telebot

    :param message: message telebot (chat.id, text)
    :return: None
    """
    word = message.text
    word = word.split()
    cid = message.chat.id
    message_to_user = add_word(cid, word[0], word[1])
    bottons3(message, message_to_user)
def bottons3(message, message_to_user):
    """ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ telebot

    :param message: message telebot(chat.id)
    :param message_to_user: f —Å—Ç—Ä–æ–∫–∞
    :return: None
    """
    buttons3 = []
    markup = types.ReplyKeyboardMarkup(row_width=3)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons3.extend([next_btn, add_word_btn, delete_word_btn])
    markup.add(*buttons3)
    bot.send_message(message.chat.id, message_to_user, reply_markup=markup)

@bot.message_handler(func=lambda message: True, content_types=['text'])  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
def message_reply(message):
    """ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —é–∑–µ—Ä–∞ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞. –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç. –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤—ã–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞
          –º–µ–Ω—è–µ—Ç (–ø–æ–º–µ—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏) –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–±–æ—Ä

    :param message: message telebot (text)
    :return: Non
    """
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:  # —Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ –ø–∞–º—è—Ç–∏
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons.extend([next_btn, add_word_btn, delete_word_btn])
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–ù–µ–≤–µ—Ä–Ω–æ!!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)

bot.add_custom_filter(custom_filters.StateFilter(bot))
session.close()
bot.infinity_polling(skip_pending=True)